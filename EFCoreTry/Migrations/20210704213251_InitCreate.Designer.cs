// <auto-generated />
using System;
using EFCoreTry;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreTry.Migrations
{
    [DbContext(typeof(PetShopDbContext))]
    [Migration("20210704213251_InitCreate")]
    partial class InitCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("EFCoreTry.Models.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateBorn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Registered")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("EFCoreTry.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VetId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VetId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("EFCoreTry.Models.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AnimalId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("EFCoreTry.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EFCoreTry.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<short>("AreaCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("EFCoreTry.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EFCoreTry.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("Birthplace")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("EFCoreTry.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("EFCoreTry.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EFCoreTry.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EFCoreTry.Models.Customer", b =>
                {
                    b.HasBaseType("EFCoreTry.Models.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("EFCoreTry.Models.Employee", b =>
                {
                    b.HasBaseType("EFCoreTry.Models.Person");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("EFCoreTry.Models.Item", b =>
                {
                    b.HasBaseType("EFCoreTry.Models.Product");

                    b.Property<int>("Stocks")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("TEXT");

                    b.HasIndex("SupplierId");

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("EFCoreTry.Models.Service", b =>
                {
                    b.HasBaseType("EFCoreTry.Models.Product");

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("EFCoreTry.Models.Vet", b =>
                {
                    b.HasBaseType("EFCoreTry.Models.Employee");

                    b.Property<string>("CertID")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Vet");
                });

            modelBuilder.Entity("EFCoreTry.Models.Animal", b =>
                {
                    b.HasOne("EFCoreTry.Models.Customer", null)
                        .WithMany("Pets")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("EFCoreTry.Models.Appointment", b =>
                {
                    b.HasOne("EFCoreTry.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("EFCoreTry.Models.Vet", "Vet")
                        .WithMany()
                        .HasForeignKey("VetId");

                    b.Navigation("Customer");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("EFCoreTry.Models.Breed", b =>
                {
                    b.HasOne("EFCoreTry.Models.Animal", null)
                        .WithMany("Breed")
                        .HasForeignKey("AnimalId");

                    b.HasOne("EFCoreTry.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EFCoreTry.Models.Category", b =>
                {
                    b.HasOne("EFCoreTry.Models.Product", null)
                        .WithMany("Categories")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("EFCoreTry.Models.ContactInfo", b =>
                {
                    b.HasOne("EFCoreTry.Models.Person", null)
                        .WithMany("Contact")
                        .HasForeignKey("PersonId");

                    b.HasOne("EFCoreTry.Models.Supplier", null)
                        .WithMany("Contacts")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("EFCoreTry.Models.Person", b =>
                {
                    b.HasOne("EFCoreTry.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("EFCoreTry.Models.Supplier", b =>
                {
                    b.HasOne("EFCoreTry.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("EFCoreTry.Models.Tag", b =>
                {
                    b.HasOne("EFCoreTry.Models.Product", null)
                        .WithMany("Tags")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("EFCoreTry.Models.Item", b =>
                {
                    b.HasOne("EFCoreTry.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCoreTry.Models.Animal", b =>
                {
                    b.Navigation("Breed");
                });

            modelBuilder.Entity("EFCoreTry.Models.Person", b =>
                {
                    b.Navigation("Contact");
                });

            modelBuilder.Entity("EFCoreTry.Models.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("EFCoreTry.Models.Supplier", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("EFCoreTry.Models.Customer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
